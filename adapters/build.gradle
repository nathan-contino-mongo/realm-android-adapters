apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'pmd'
apply plugin: 'checkstyle'

android {
    compileSdkVersion sdkVersion
    buildToolsVersion buildTools

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion sdkVersion
        project.archivesBaseName = "android-adapters"
    }

    compileOptions {
        sourceCompatibility 1.11
        targetCompatibility 1.11
    }
}

dependencies {
    compileOnly "androidx.recyclerview:recyclerview:${androidXVersion}"
    compileOnly "io.realm:realm-android-library:${realmVersion}"
}

task pmd(type: Pmd) {
    group = 'Verification'
    print "${projectDir}"
    source = fileTree('src/main/java')
    ruleSetFiles = files("${projectDir}/../config/pmd/ruleset.xml")
    ruleSets = [] // This needs to be here to remove the default checks

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task checkstyle(type: Checkstyle) {
    group = 'Test'

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    def configProps = ['proj.module.dir': projectDir.absolutePath]
    configProperties configProps

    configFile = file("${projectDir}/../config/checkstyle/checkstyle.xml")

    // empty classpath
    classpath = files()
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs

    options {
        title = "Realm Android Adapters ${project.version}"
        memberLevel = JavadocMemberLevel.PUBLIC
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        locale = 'en_US'

        links "https://docs.oracle.com/javase/11/docs/api/"
        links "https://realm.io/docs/java/${realmVersion}/api/"
        linksOffline "https://developer.android.com/reference/", "${android.sdkDirectory}/docs/reference"
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

bintray {
    user = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
    key = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'

    dryRun = false
    publish = false

    configurations = ['archives']

    pkg {
        repo = 'maven'
        name = 'android-adapters'
        desc = 'Realm Android Adapters'
        websiteUrl = 'https://realm.io'
        issueTrackerUrl = 'https://github.com/realm/realm-android-adapters/issues'
        vcsUrl = 'https://github.com/realm/realm-android-adapters.git'
        licenses = ['Apache-2.0']
        labels = ['android', 'realm']
        publicDownloadNumbers = false
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
            password = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
            maven = true
        }
        defaults {
            publishConfigs('archives')
            publishPom = true
            publishIvy = false
        }
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

afterEvaluate {
    javadoc.classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    javadoc.classpath += project.android.libraryVariants.toList().first().getJavaCompileProvider().get().classpath

    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                artifactId = 'android-adapters'
                version = '4.0'
            }
            // Creates a Maven publication called “debug”.
            debug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.debug

                artifactId = 'android-adapters'
                version = '4.0'
            }
        }
    }
}
